import React, { useEffect, useState } from 'react';
import {
  FlatList,
  Platform,
  Text,
  TextInput,
  TouchableOpacity,
  View,
  Alert,
  ScrollView,
} from 'react-native';
import {
  WiFiListenersEnum,
  startQuickDeviceSearch,
  addFoundDevice,
  stopSetWiFi,
  wifiEventEmitter,
  QuickSearchDeviceParams,
  FoundDeviceData,
  AddFoundDeviceParams,
} from 'react-native-funsdk';
import { styles } from '../styles';
import { askPermissionLocation } from '../utils/permisiion';
import { WIFI_PASSWORD, WIFI_SSID } from '../topsecret';

const Button = ({
  onPress,
  text,
  disabled = false,
}: {
  onPress: () => void;
  text: string;
  disabled?: boolean;
}) => {
  return (
    <TouchableOpacity
      onPress={onPress}
      style={[styles.button, disabled && styles.buttonDisabled]}
      disabled={disabled}
    >
      <Text style={styles.buttonText}>{text}</Text>
    </TouchableOpacity>
  );
};

export const DeviceSearch = () => {
  const [wifiConnectStatus, setWifiConnectStatus] = useState<any[]>([]);
  const [wifiPassword, setWifiPassword] = useState(WIFI_PASSWORD);
  const [wifiSSID, setWifiSSID] = useState(WIFI_SSID);
  const [isSearching, setIsSearching] = useState(false);
  const [isAdding, setIsAdding] = useState(false);
  const [foundDevice, setFoundDevice] = useState<FoundDeviceData | null>(null);

  const startFindDevice = async () => {
    setWifiConnectStatus([]);
    setFoundDevice(null);
    setIsSearching(true);

    if (Platform.OS === 'android') {
      await askPermissionLocation();
    }

    try {
      const searchParams: QuickSearchDeviceParams = {
        ssidWifi: wifiSSID,
        passwordWifi: wifiPassword,
      };

      console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', searchParams);

      startQuickDeviceSearch(searchParams);
      // const deviceData = await startDeviceSearch(searchParams);

      // console.log('‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–æ:', deviceData);
      // setFoundDevice(deviceData);

      // setWifiConnectStatus((prev) => {
      //   return [
      //     ...prev,
      //     `‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–æ: ${deviceData.deviceName} (${deviceData.deviceMac})`,
      //   ];
      // });
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);

      // let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      // if (error.code === 'timeout') {
      //   errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –ø–æ–∏—Å–∫–∞ (180 —Å–µ–∫—É–Ω–¥)';
      // } else if (error.code === 'search_error') {
      //   errorMessage = `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error.message}`;
      // } else if (error.code === 'random_pwd_error') {
      //   errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö';
      // }

      // setWifiConnectStatus((prev) => {
      //   return [...prev, `‚ùå ${errorMessage}`];
      // });

      // Alert.alert('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞', errorMessage);
    } finally {
      // setIsSearching(false);
    }
  };

  const addFoundDeviceToSystem = async () => {
    if (!foundDevice) {
      Alert.alert('–û—à–∏–±–∫–∞', '–°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ');
      return;
    }

    setIsAdding(true);

    try {
      const addParams: AddFoundDeviceParams = {
        deviceMac: foundDevice.devId,
        deviceName: foundDevice.devName,
        loginName: foundDevice.devUserName,
        loginPassword: foundDevice.devPassword,
        deviceType: foundDevice.devType,
      };
      // const addParams: AddFoundDeviceParams = {
      //   deviceMac: foundDevice.deviceMac,
      //   deviceName: foundDevice.deviceName,
      //   loginName: foundDevice.loginName,
      //   loginPassword: foundDevice.loginPassword,
      //   deviceType: foundDevice.deviceType,
      // };

      console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', addParams);

      const result = await addFoundDevice(addParams);

      console.log('‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:', result);

      setWifiConnectStatus((prev) => {
        return [
          ...prev,
          `‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${result.deviceName}`,
        ];
      });

      Alert.alert('–£—Å–ø–µ—Ö', '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—É');

      // –û—á–∏—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
      setFoundDevice(null);
    } catch (error: any) {
      // –ï—Å–ª–∏ -604101 —Ç–æ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);

      let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      if (error.code === 'add_device_error') {
        errorMessage = error.message;
      } else if (error.code === 'random_user_error') {
        errorMessage = `–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${error.message}`;
      }

      setWifiConnectStatus((prev) => {
        return [...prev, `‚ùå ${errorMessage}`];
      });

      Alert.alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è', errorMessage);
    } finally {
      setIsAdding(false);
    }
  };

  const stopFindDevice = async () => {
    if (Platform.OS === 'android') {
      await askPermissionLocation();
    }

    try {
      const res = await stopSetWiFi();
      console.log('üõë –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', res);
      setWifiConnectStatus((prev) => {
        return [...prev, 'üõë –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'];
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–∏—Å–∫–∞:', error);
    } finally {
      setIsSearching(false);
    }
  };

  const clearLogs = () => {
    setWifiConnectStatus([]);
    setFoundDevice(null);
  };

  useEffect(() => {
    let eventListener = wifiEventEmitter.addListener(
      WiFiListenersEnum.ON_SET_WIFI,
      (event) => {
        console.log('üì° WiFi Event:', event);
        setWifiConnectStatus((prev) => {
          return [...prev, `üì° WiFi: ${JSON.stringify(event)}`];
        });
      }
    );

    let eventDeviceListener = wifiEventEmitter.addListener(
      WiFiListenersEnum.ON_ADD_DEVICE_STATUS,
      (event) => {
        console.log('üì° Device Status Event:', event);

        if (event.status === 'readyToAdd' && event?.deviceData) {
          const { deviceData } = event;
          console.log('üì° –ì–æ—Ç–æ–≤–æ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é:', deviceData);

          setWifiConnectStatus((prev) => {
            return [
              ...prev,
              `‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–æ: ${deviceData?.deviceName} (${deviceData?.deviceMac})`,
            ];
          });
          setWifiConnectStatus((prev) => {
            return [
              ...prev,
              `üì° –ì–æ—Ç–æ–≤–æ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é: ${JSON.stringify(deviceData, null, 2)}`,
            ];
          });

          setIsSearching(false);
          setFoundDevice(deviceData);
          stopFindDevice();
        } else if (event.status === 'error') {
          setWifiConnectStatus((prev) => {
            return [...prev, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${JSON.stringify(event)}`];
          });
          stopFindDevice();
        } else if (event.status === 'connected') {
          setWifiConnectStatus((prev) => {
            return [...prev, `‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–æ:`];
          });
        } else if (event.status === 'start') {
          setWifiConnectStatus((prev) => {
            return [...prev, `üîç –ü–æ–∏—Å–∫ –Ω–∞—á–∞—Ç:`];
          });
        } else {
          setWifiConnectStatus((prev) => {
            return [...prev, `üì° Device Status: ${JSON.stringify(event)}`];
          });
        }
      }
    );

    return () => {
      eventListener.remove();
      eventDeviceListener.remove();
    };
  }, []);

  const renderLogItem = ({ item, index }: { item: string; index: number }) => (
    <View style={styles.logItem}>
      <Text style={styles.logText}>{`${index + 1}. ${item}`}</Text>
    </View>
  );

  return (
    <ScrollView style={styles.container} showsVerticalScrollIndicator={true}>
      <Text style={styles.title}>–ü–æ–∏—Å–∫ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤</Text>

      {/* –ü–æ–ª—è –≤–≤–æ–¥–∞ WiFi */}
      <View style={styles.inputContainer}>
        <Text style={styles.label}>WiFi SSID:</Text>
        <TextInput
          style={styles.input}
          value={wifiSSID}
          onChangeText={setWifiSSID}
          placeholder="–í–≤–µ–¥–∏—Ç–µ SSID WiFi —Å–µ—Ç–∏"
        />
      </View>

      <View style={styles.inputContainer}>
        <Text style={styles.label}>WiFi –ü–∞—Ä–æ–ª—å:</Text>
        <TextInput
          style={styles.input}
          value={wifiPassword}
          onChangeText={setWifiPassword}
          placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å WiFi"
          secureTextEntry
        />
      </View>

      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <View style={styles.buttonContainer}>
        <Button
          onPress={startFindDevice}
          text={isSearching ? 'üîç –ü–æ–∏—Å–∫...' : 'üîç –ù–∞–π—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'}
          disabled={isSearching}
        />

        <Button
          onPress={stopFindDevice}
          text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫"
          disabled={!isSearching}
        />

        <Button
          onPress={addFoundDeviceToSystem}
          text={isAdding ? '‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ...' : '‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'}
          disabled={!foundDevice || isAdding}
        />

        <Button onPress={clearLogs} text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏" />
      </View>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ */}
      {foundDevice && (
        <View style={styles.deviceInfo}>
          <Text style={styles.deviceInfoTitle}>üì± –ù–∞–π–¥–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</Text>
          <Text style={styles.deviceInfoText}>–ò–º—è: {foundDevice.devName}</Text>
          <Text style={styles.deviceInfoText}>MAC: {foundDevice.devId}</Text>
          <Text style={styles.deviceInfoText}>–¢–∏–ø: {foundDevice.devType}</Text>
          <Text style={styles.deviceInfoText}>
            –õ–æ–≥–∏–Ω: {foundDevice.devUserName}
          </Text>
          <Text style={styles.deviceInfoText}>
            –°–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å: {foundDevice.withRandomPassword ? '–î–∞' : '–ù–µ—Ç'}
          </Text>
          {foundDevice.randomUserData && (
            <Text style={styles.deviceInfoText}>
              –°–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {JSON.stringify(foundDevice.randomUserData)}
            </Text>
          )}
        </View>
      )}

      {/* –õ–æ–≥–∏ */}
      <View style={styles.logsContainer}>
        <Text style={styles.logsTitle}>üìã –õ–æ–≥–∏ —Å–æ–±—ã—Ç–∏–π:</Text>
        <FlatList
          data={wifiConnectStatus}
          renderItem={renderLogItem}
          keyExtractor={(_, index) => index.toString()}
          style={styles.logsList}
          showsVerticalScrollIndicator={true}
          scrollEnabled={true}
          nestedScrollEnabled={true}
        />
      </View>
    </ScrollView>
  );
};
